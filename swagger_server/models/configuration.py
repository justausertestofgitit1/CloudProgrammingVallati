# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Configuration(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, time_start: str=None, time_end: str=None, flavor: str=None, image: str=None, number_of_v_ms: int=None):  # noqa: E501
        """Configuration - a model defined in Swagger

        :param id: The id of this Configuration.  # noqa: E501
        :type id: int
        :param time_start: The time_start of this Configuration.  # noqa: E501
        :type time_start: str
        :param time_end: The time_end of this Configuration.  # noqa: E501
        :type time_end: str
        :param flavor: The flavor of this Configuration.  # noqa: E501
        :type flavor: str
        :param image: The image of this Configuration.  # noqa: E501
        :type image: str
        :param number_of_v_ms: The number_of_v_ms of this Configuration.  # noqa: E501
        :type number_of_v_ms: int
        """
        self.swagger_types = {
            'id': int,
            'time_start': str,
            'time_end': str,
            'flavor': str,
            'image': str,
            'number_of_v_ms': int
        }

        self.attribute_map = {
            'id': 'id',
            'time_start': 'timeStart',
            'time_end': 'timeEnd',
            'flavor': 'flavor',
            'image': 'image',
            'number_of_v_ms': 'numberOfVMs'
        }

        self._id = id
        self._time_start = time_start
        self._time_end = time_end
        self._flavor = flavor
        self._image = image
        self._number_of_v_ms = number_of_v_ms

    @classmethod
    def from_dict(cls, dikt) -> 'Configuration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Configuration of this Configuration.  # noqa: E501
        :rtype: Configuration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Configuration.


        :return: The id of this Configuration.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Configuration.


        :param id: The id of this Configuration.
        :type id: int
        """

        self._id = id

    @property
    def time_start(self) -> str:
        """Gets the time_start of this Configuration.


        :return: The time_start of this Configuration.
        :rtype: str
        """
        return self._time_start

    @time_start.setter
    def time_start(self, time_start: str):
        """Sets the time_start of this Configuration.


        :param time_start: The time_start of this Configuration.
        :type time_start: str
        """
        if time_start is None:
            raise ValueError("Invalid value for `time_start`, must not be `None`")  # noqa: E501

        self._time_start = time_start

    @property
    def time_end(self) -> str:
        """Gets the time_end of this Configuration.


        :return: The time_end of this Configuration.
        :rtype: str
        """
        return self._time_end

    @time_end.setter
    def time_end(self, time_end: str):
        """Sets the time_end of this Configuration.


        :param time_end: The time_end of this Configuration.
        :type time_end: str
        """
        if time_end is None:
            raise ValueError("Invalid value for `time_end`, must not be `None`")  # noqa: E501

        self._time_end = time_end

    @property
    def flavor(self) -> str:
        """Gets the flavor of this Configuration.


        :return: The flavor of this Configuration.
        :rtype: str
        """
        return self._flavor

    @flavor.setter
    def flavor(self, flavor: str):
        """Sets the flavor of this Configuration.


        :param flavor: The flavor of this Configuration.
        :type flavor: str
        """
        if flavor is None:
            raise ValueError("Invalid value for `flavor`, must not be `None`")  # noqa: E501

        self._flavor = flavor

    @property
    def image(self) -> str:
        """Gets the image of this Configuration.


        :return: The image of this Configuration.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this Configuration.


        :param image: The image of this Configuration.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def number_of_v_ms(self) -> int:
        """Gets the number_of_v_ms of this Configuration.


        :return: The number_of_v_ms of this Configuration.
        :rtype: int
        """
        return self._number_of_v_ms

    @number_of_v_ms.setter
    def number_of_v_ms(self, number_of_v_ms: int):
        """Sets the number_of_v_ms of this Configuration.


        :param number_of_v_ms: The number_of_v_ms of this Configuration.
        :type number_of_v_ms: int
        """
        if number_of_v_ms is None:
            raise ValueError("Invalid value for `number_of_v_ms`, must not be `None`")  # noqa: E501

        self._number_of_v_ms = number_of_v_ms
